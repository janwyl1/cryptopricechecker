{"version":3,"sources":["Chart.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["hoverEvent","target","eventHandlers","onMouseOver","mutation","style","fill","active","onMouseOut","MarketCapChart","props","domainPadding","theme","VictoryTheme","material","height","width","text","x","y","textAnchor","dependentAxis","tickFormat","data","currencies","sort","c1","c2","marketCapitalization","slice","scale","labels","map","name","toFixed","labelComponent","cornerRadius","events","PriceChart","price","GainersChart","changes","padding","top","LosersChart","offsetY","parent","marginTop","Table","useState","field","desc","sortBy","setSortBy","handleSortByClick","e","preventDefault","id","substring","className","onClick","a","b","localeCompare","sortByFunc","currency","key","ticker","alt","src","toLowerCase","title","API","App","setCurrencies","isLoading","setIsLoading","error","setError","apiUrl","fetch","res","ok","message","json","cryptocurrenciesList","useEffect","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0427c89e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {  VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryTooltip, VictoryLabel } from 'victory'; // Victory charts - https://formidable.com/open-source/victory/docs/\r\n\r\nconst hoverEvent = [{\r\n    target: \"data\",\r\n    eventHandlers: {\r\n        onMouseOver: () => {\r\n            return [{\r\n                target: \"data\",\r\n                mutation: () => ({ style: { fill: \"#bbb\" }})\r\n\r\n            }, {\r\n                target: \"labels\",\r\n                mutation: () => ({ active: true })\r\n            }];\r\n        },\r\n        onMouseOut: () => {\r\n            return [{\r\n                target: \"data\",\r\n                mutation: () => { return null; }\r\n            }, {\r\n                target: \"labels\",\r\n                mutation: () => ({ active: false })\r\n            }];\r\n        }\r\n    }\r\n}]\r\n\r\nexport function MarketCapChart(props) {\r\n    return (\r\n        <VictoryChart domainPadding={10} theme={VictoryTheme.material} height={350} width={450} >\r\n        <VictoryLabel text=\"Top 10 Cryptos by Market Cap\" x={225} y={30} textAnchor=\"middle\"/>\r\n            <VictoryAxis />\r\n            <VictoryAxis dependentAxis tickFormat={(x) => (`$${x / 1000000000}b`)}   />\r\n            <VictoryBar \r\n                data={props.currencies.sort((c1,c2) => (c1.marketCapitalization  < c2.marketCapitalization) ? 1 : -1).slice(0,10)} \r\n                x=\"ticker\" y=\"marketCapitalization\" \r\n                scale={{y: \"linear\"}}  \r\n                labels={props.currencies.map(c1 => c1.name + '\\n' + '$' + (c1.marketCapitalization / 1000000000).toFixed(2) + 'b')}\r\n                labelComponent={    \r\n                <VictoryTooltip \r\n                  cornerRadius={0}\r\n                /> }\r\n                style={{data: {fill: \"teal\"}}}\r\n                events={hoverEvent}\r\n            />    \r\n        </VictoryChart>\r\n    )\r\n}\r\n\r\nexport function PriceChart(props) {\r\n    return (\r\n        <VictoryChart domainPadding={10} theme={VictoryTheme.material} height={350} width={450}  >\r\n            <VictoryLabel text=\"Top 10 Cryptos by Price (USD)\" x={225} y={30} textAnchor=\"middle\"/>\r\n            <VictoryAxis />\r\n            <VictoryAxis dependentAxis  tickFormat={(x) => (`$${x / 1000}k`)}  />\r\n            <VictoryBar \r\n            data={props.currencies.sort((c1,c2) => (c1.price  < c2.price) ? 1 : -1).slice(0,10)} \r\n            x=\"ticker\" y=\"price\" \r\n            labels={props.currencies.map(c1 => c1.name + '\\n' + '$' + c1.price.toFixed(2))}\r\n              labelComponent={    \r\n                <VictoryTooltip \r\n                  cornerRadius={0}\r\n                /> }\r\n\r\n            style={{data: {fill: \"tomato\"}}}\r\n            events={hoverEvent}\r\n            />\r\n        </VictoryChart>\r\n    )\r\n}\r\n\r\nexport function GainersChart(props) {\r\n    return (\r\n        <VictoryChart domainPadding={10} theme={VictoryTheme.material} height={350} width={450}>\r\n        <VictoryLabel text=\"Top 10 Gainers by % Increase\" x={225} y={30} textAnchor=\"middle\"/>\r\n            <VictoryAxis  />\r\n            <VictoryAxis dependentAxis tickFormat={(x) => (`${x}%`)}   />\r\n            <VictoryBar \r\n                data={props.currencies.sort((c1,c2) => (c1.changes  < c2.changes) ? 1 : -1).slice(0,10)} \r\n                x=\"ticker\" y=\"changes\" \r\n                scale={{y: \"linear\"}}  \r\n                padding={{top: 50}}\r\n                labels={props.currencies.map(c1 => c1.name + '\\n' + (c1.changes).toFixed(2) + '%')}\r\n                labelComponent={    \r\n                <VictoryTooltip \r\n                  cornerRadius={0}\r\n                /> }\r\n                style={{data: {fill: \"darkgreen\"}}}\r\n                events={hoverEvent}\r\n\r\n            />    \r\n        </VictoryChart>\r\n    )\r\n}\r\n\r\nexport function LosersChart(props) {\r\n    return (\r\n        <VictoryChart domainPadding={10} theme={VictoryTheme.material} height={350} width={450} offsetY={300} style={{parent: {marginTop: \"40px\" }}}>\r\n        <VictoryLabel text=\"Top 10 Losers by % Decrease\" x={225} y={10} textAnchor=\"middle\"/>\r\n            <VictoryAxis    />\r\n            <VictoryAxis dependentAxis  tickFormat={(x) => (`${x}%`)}   />\r\n            <VictoryBar \r\n                data={props.currencies.sort((c1,c2) => (c1.changes  < c2.changes) ? -1 : 1).slice(0,10)} \r\n                x=\"ticker\" y=\"changes\" \r\n                scale={{y: \"linear\"}}  \r\n                labels={props.currencies.map(c1 => c1.name + '\\n' + (c1.changes).toFixed(2) + '%')}\r\n                labelComponent={    \r\n                <VictoryTooltip \r\n                  cornerRadius={0}\r\n                /> }\r\n                style={{data: {fill: \"darkred\"}}}\r\n                events={hoverEvent}\r\n            />    \r\n        </VictoryChart>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\n\r\n/** \r\n  Table Component\r\n*/\r\nexport function Table(props) {\r\n    const [sortBy, setSortBy] = useState({field:'marketCapitalization', desc: 1});\r\n\r\n    /* Toggle Asc/Desc state. Get id from <th> element and remove tbl- prefix */\r\n    function handleSortByClick(e) {\r\n      e.preventDefault();\r\n      setSortBy({ field: e.target.id.substring(4), desc: 1 - sortBy.desc })\r\n    }\r\n    /* Determine which function to use for sorting currencies */\r\n    function sortByFunc() {\r\n        switch (sortBy.field) {\r\n            case 'name':\r\n            case 'ticker':\r\n                if (sortBy.desc === 0) {\r\n                    return (a, b) => a[sortBy.field].localeCompare(b[sortBy.field])\r\n                }\r\n                return (a, b) => b[sortBy.field].localeCompare(a[sortBy.field])\r\n            case 'price':\r\n            case 'changes':\r\n            case 'marketCapitalization':\r\n            default:\r\n                if (sortBy.desc === 0) {\r\n                    return (a, b) => (a[sortBy.field] - b[sortBy.field])\r\n                }\r\n                return (a, b) => (b[sortBy.field] - a[sortBy.field])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <table className=\"curTbl\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Icon</th>\r\n                    <th id=\"tbl-name\" onClick={handleSortByClick}>Name <span className={\"sort-icon \" + (sortBy.desc === 1 ? \"sort-icon-down\" : \"sort-icon-up\")}>&#x27A4;</span></th>\r\n                    <th id=\"tbl-ticker\" onClick={handleSortByClick}>Ticker <span className={\"sort-icon \" + (sortBy.desc === 1 ? \"sort-icon-down\" : \"sort-icon-up\")}>&#x27A4;</span></th>\r\n                    <th id=\"tbl-price\" onClick={handleSortByClick}>Price <span className={\"sort-icon \" + (sortBy.desc === 1 ? \"sort-icon-down\" : \"sort-icon-up\")}>&#x27A4;</span></th>\r\n                    <th id=\"tbl-changes\" onClick={handleSortByClick}>Change <span className={\"sort-icon \" + (sortBy.desc === 1 ? \"sort-icon-down\" : \"sort-icon-up\")}>&#x27A4;</span></th>  \r\n                    <th id=\"tbl-marketCapitalization\" onClick={handleSortByClick}>Market Cap <span className={\"sort-icon \" + (sortBy.desc === 1 ? \"sort-icon-down\" : \"sort-icon-up\")}>&#x27A4;</span></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.currencies\r\n              .sort(sortByFunc())\r\n              .map(currency =>\r\n                  <tr key={currency.ticker}>\r\n                    <td><img alt={currency.name} src={process.env.PUBLIC_URL + '/icons/' + currency.ticker.toLowerCase() + '.svg' } /></td>\r\n                    <td>{currency.name}</td>\r\n                    <td>{currency.ticker}</td>\r\n                    <td title={\"$\" + currency.price}>${currency.price.toFixed(2)}</td>\r\n                    <td title={\"$\" + currency.changes + \"%\"}>{currency.changes.toFixed(2)}%</td>\r\n                    <td title={\"$\" + currency.marketCapitalization}>${(currency.marketCapitalization / 1000000000).toFixed(2)}b</td>           \r\n                  </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n    )\r\n}","import './App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport {PriceChart, MarketCapChart, GainersChart, LosersChart} from './Chart';\r\nimport {Table} from './Table';\r\n\r\n// api docs - https://financialmodelingprep.com/developer/docs/#Cryptocurrencies\r\nconst API = 'https://financialmodelingprep.com/api/v3/cryptocurrencies';\r\n// const API = 'http://localhost:3000/dummy/cryptocurrencies.json';\r\n\r\n\r\n/**\r\n    App - fetches currency data\r\n*/\r\nfunction App() {\r\n    const [currencies, setCurrencies] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    async function fetchData(apiUrl) {\r\n        const res = await fetch(apiUrl);\r\n        if (!res.ok) {\r\n            setIsLoading(false);\r\n            setError({ error: { message: 'Unable to load currency data...' } });\r\n            return false;\r\n        }\r\n        const data = await res.json()\r\n        setCurrencies(data.cryptocurrenciesList);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData(API) \r\n    }, []) // empty array tells it to run only once (called skipping effects)\r\n\r\n    if (isLoading) {\r\n        return <p>Loading...</p>\r\n    }\r\n    if (error) {\r\n        return <p>Error: {error.message ? error.message : \" Something went wrong...\"}</p>\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"App-header\"> \r\n            <div className=\"container\">\r\n            <h1>Cryptocurrency Prices</h1>\r\n            <p>Price info for 100 of the most popular cryptocurrencies. Data via Financial Modelling Prep API</p>\r\n            </div>\r\n        </div>\r\n        <div className=\"container\">\r\n        <div className=\"charts\">\r\n            <div className=\"chart-row\">\r\n                <MarketCapChart currencies={currencies}/>\r\n                <PriceChart currencies={currencies}/>\r\n            </div>\r\n            <div className=\"chart-row\">\r\n                <GainersChart currencies={currencies}/>\r\n                <LosersChart currencies={currencies} />\r\n            </div>\r\n        </div>\r\n        <Table currencies={currencies} />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}